

package ass2_os_final;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.application.Platform.exit;
import javax.swing.JTextArea;


       
public class Network{
///////////////////////////////Interface/////////////////////////////////////////
    public static class Interface extends javax.swing.JFrame {

        /**
         * Creates new form Network
         */
        public Interface() {
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents() {

            jTextField1 = new javax.swing.JTextField();
            jScrollPane1 = new javax.swing.JScrollPane();
            connectionNo = new javax.swing.JTextArea();
            jTextField2 = new javax.swing.JTextField();
            jScrollPane2 = new javax.swing.JScrollPane();
            devicesNo = new javax.swing.JTextArea();
            jTextField3 = new javax.swing.JTextField();
            jScrollPane3 = new javax.swing.JScrollPane();
            devicesName = new javax.swing.JTextArea();
            jScrollPane4 = new javax.swing.JScrollPane();
            output = new javax.swing.JTextArea();
            jButton1 = new javax.swing.JButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            jTextField1.setEditable(false);
            jTextField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            jTextField1.setText("Connections No");
            jTextField1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField1ActionPerformed(evt);
                }
            });

            connectionNo.setColumns(20);
            connectionNo.setRows(5);
            jScrollPane1.setViewportView(connectionNo);

            jTextField2.setEditable(false);
            jTextField2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            jTextField2.setText("Devices No");
            jTextField2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField2ActionPerformed(evt);
                }
            });

            devicesNo.setColumns(20);
            devicesNo.setRows(5);
            jScrollPane2.setViewportView(devicesNo);

            jTextField3.setEditable(false);
            jTextField3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            jTextField3.setText("Devices Name/ Type");

            devicesName.setColumns(20);
            devicesName.setRows(5);
            jScrollPane3.setViewportView(devicesName);

            output.setColumns(20);
            output.setFont(new java.awt.Font("Eras Demi ITC", 2, 14)); // NOI18N
            output.setForeground(new java.awt.Color(102, 102, 255));
            output.setRows(5);
            output.setToolTipText("");
            jScrollPane4.setViewportView(output);

            jButton1.setBackground(new java.awt.Color(204, 0, 0));
            jButton1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
            jButton1.setForeground(new java.awt.Color(153, 0, 0));
            jButton1.setText("Run");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap(24, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField2)
                                .addComponent(jTextField1)
                                .addComponent(jTextField3))
                            .addGap(37, 37, 37)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3))
                            .addGap(78, 78, 78)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(91, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addGap(37, 37, 37)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(43, 43, 43)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGap(31, 31, 31)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>                        

        private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
            // TODO add your handling code here:
        }                                           

        private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {                                            
            // TODO add your handling code here:
        }                                           

        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
            try {
                String numOfDevices , max , names ;
                max = connectionNo.getText() ;
                numOfDevices = devicesNo.getText() ;
                names = devicesName.getText() ;
                String [] devicesNames = names.split("\n") ;

                int _max = Integer.parseInt(max) ;
                int _numOfDevices=Integer.parseInt(numOfDevices);
            ArrayList<Device> Devices = new ArrayList<>();


            Router router = new Router(_max);
            for (int i = 0; i < _numOfDevices; i++) {
                    String [] devicesNames2 = devicesNames[i].split(" ") ;
                    Device device1 = new Device(devicesNames2[0],devicesNames2[1], router,output);
                    Devices.add(device1);


            }
                for (int i = 0; i < _numOfDevices; i++) {
                    sleep(1000);
                    Devices.get(i).start();
                }
                exit() ;
            }catch (Exception ex) {

            }

        }                                        

        /**
         * @param args the command line arguments
         */


        // Variables declaration - do not modify                     
        private javax.swing.JTextArea connectionNo;
        private javax.swing.JTextArea devicesName;
        private javax.swing.JTextArea devicesNo;
        private javax.swing.JButton jButton1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JScrollPane jScrollPane4;
        private javax.swing.JTextField jTextField1;
        private javax.swing.JTextField jTextField2;
        private javax.swing.JTextField jTextField3;
        private javax.swing.JTextArea output;
        // End of variables declaration                   
    }
///////////////////////////////////Semaphore///////////////////////////////////
      public static class Semaphore {

       protected int value ;
    //   public javax.swing.JTextArea out;
       protected Semaphore() { value = 0 ; }
       protected Semaphore(int initial) { value = initial ; }
       public synchronized void Wait(Device device) throws IOException, InterruptedException {
           value-- ;
           if (value < 0) {
               try { 
                   device.out.append("("+device.getNam()+") ("+device.getType()+") arrived and waiting.\n");
                   System.out.println("("+device.getNam()+") ("+device.getType()+") arrived and waiting.\n");
                   device.out.append("\n");
                   writetoFile("("+device.getNam()+") ("+device.getType()+") arrived and waiting.\n");
                   wait() ;
                   }
               catch( InterruptedException e ) { }
           }
           else {
               device.out.append("("+device.getNam()+") ("+device.getType()+") arrived.\n");
               System.out.println("("+device.getNam()+") ("+device.getType()+") arrived.\n");
               writetoFile("("+device.getNam()+") ("+device.getType()+") arrived.\n");
               device.out.append("\n");
           }


           }
       public synchronized void signal(Device device) {
           value++ ; 
           if (value <= 0) notify() ;
           device.out.append("Connection "+device.getCID()+": "+ device.getNam()+" logged out.\n");
           System.out.println("Connection "+device.getCID()+": "+ device.getNam()+" logged out.\n");
           device.out.append("\n");

       }

   }
        //////////////////////////////////Router//////////////////////////////
            public static class Router {
            Semaphore semaphore;
            int maxDevices;
            int currentDevices;
            static Map<Integer,Boolean>connections=new HashMap<Integer, Boolean>();
            ArrayList<Device> Devices= new ArrayList<Device>();
            Router(int max){
                this.maxDevices = max;
                this.currentDevices = 0;
                semaphore=new Semaphore(max);
                for(int x=0;x<max;x++)
                    connections.put(x+1, false);
            }
            public synchronized void connect(Device device) throws IOException, InterruptedException {

                        this.semaphore.Wait(device);

                       for(int key:connections.keySet())
                       {
                           if(!connections.get(key)){
                            device.setCID(key);

                            connections.put(key, true);
                            break;
                           }
                       }


            }
            public void disconnect(Device device) {
                connections.put(device.getCID(),false);
                this.semaphore.signal(device);


                }

        }
        
/////////////////////////////////////////////Device///////////////////////////////////////////////////////
        public static class Device extends Thread{

                String name;
                String type;
                int CID;
                Router router;
                public javax.swing.JTextArea out;

                Device(String name, String type,Router router){
                        this.name = name;
                        this.type = type;
                        this.router = router;
                }



            Device(String devicesName, Router router, JTextArea output) {
                this.name = devicesName;
                this.type = "";
                this.router = router;
                this.out = output ;
            }

            Device(String devicesName, String devicesName0, Router router, JTextArea output) {
                this.name = devicesName;
                this.type = devicesName0;
                this.router = router;
                this.out = output ;
            }

                @Override
                public void run() {

                    try {
                        router.connect(this) ;
                    } catch (IOException ex) {
                        Logger.getLogger(Device.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Device.class.getName()).log(Level.SEVERE, null, ex);
                    }



                    try {
                        this.out.append("Connection "+CID+": "+ name+" Occupied.\n");
                        this.out.append("\n");
                        System.out.println("Connection "+CID+": "+ name+" Occupied.\n");
                        writetoFile("Connection "+CID+": "+ name+" Occupied.\n");
                        RandomFun();

                        this.out.append("Connection "+CID+": "+ name+" logged in.\n");
                        this.out.append("\n");
                        System.out.println("Connection "+CID+": "+ name+" logged in.\n");
                        writetoFile("Connection "+CID+": "+ name+" logged in.\n");
                        RandomFun();

                        this.out.append("Connection "+CID+": "+ name+" Performs activity.\n");
                        this.out.append("\n");
                        System.out.println("Connection "+CID+": "+ name+" Performs activity.\n");
                        writetoFile("Connection "+CID+": "+ name+" Performs activity.\n");
                        RandomFun();
                    } catch (IOException ex) {
                        Logger.getLogger(Device.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Device.class.getName()).log(Level.SEVERE, null, ex);
                    }

                        router.disconnect(this);	
                }
                public void RandomFun(){
                    try {
                            Random rand = new Random();

                            int  activityTime = rand.nextInt(2000)+200;
                            Thread.sleep(activityTime);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                }
                public void setNam(String name) {
                        this.name =name ;
                }
                public void setType(String type) {
                        this.type =type ;
                }
                public void setCID(int ID) {
                        this.CID =ID;
                }

                public int getCID() {
                        return CID;
                }
                public String getNam() {
                        return name;
                }

                public String getType() {
                        return type;
                }
        }




        public static void writetoFile(String input) throws IOException, InterruptedException{
                      BufferedWriter out = new BufferedWriter(
                    new FileWriter("Output.txt", true));
                          out.append(input);
                             out.close();
                            // sleep(2000);

        }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws InterruptedException, IOException {
            Interface g=new Interface();
            g.setVisible(true) ; 
	}
    ////////////////////////////////
    
	       
    }
    

